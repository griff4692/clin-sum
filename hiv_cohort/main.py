from collections import defaultdict
from datetime import datetime
import glob
import os
import random
import string
import sys
import time

from fastavro import writer, reader, parse_schema
import numpy as np
import pandas as pd
import pprint
from tqdm import tqdm

MED_CODE_FN = '/nlp/projects/oliver_avroProcessing/medCodeMapping/dataSaves/medCodeMetaData.csv'


# this isn't used
# AVRO_SCHEMA = {
#   "type" : "record",
#   "name" : "TUPLE_0",
#   "fields" : [ {
# 	"name" : "TIME_STR_KEY",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "PRIMARY_TIME",
# 	"type" : [ "null", "long" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "MRN",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "EMPI",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "PATIENT_NAME",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "ORGANIZATION",
# 	"type" : [ "null", "int" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "ALTERNATE_ID",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "EVENT_CODE",
# 	"type" : [ "null", "int" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "FACILITY_CODE",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "EVENT_STATUS",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "CWID",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "PROVIDER_NAME",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "UPDATE_TIME",
# 	"type" : [ "null", "long" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "TITLE",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }, {
# 	"name" : "TEXT",
# 	"type" : [ "null", "string" ],
# 	"doc" : "autogenerated from Pig Field Schema"
#   }]
# }


# ROW_ID    fileName    SUBJECT_ID  HADM_ID CHARTDATE   CHARTTIME   NOTE_SPLIT  note_content
# csv file must contain fileName and note_content for it to work with prioritization

def get_med_code_info(med_code_df, med_code):
    info = defaultdict(list)
    med_code_row = med_code_df[med_code_df['medCode'] == med_code]
    if med_code_row.shape[0] > 0:
        med_code_dict = med_code_row.iloc[0].to_dict()

        for k, v in med_code_dict.items():
            if k == 'medCode' or v == 0:
                continue
            prefix = k.split('_')[0]
            info[prefix].append(k)
    return info


def write_avro_to_csv(avro_fp, note_type_list, fuzzy_note_type_list, out_fp, max=100):
    """
    Description: Loops through the avro folder and extracts notes of a certain type.
    Input:
        avro_fp (str): Path to the folder containng all avro friles.
        note_type_list (list(str)): A list of strings containing note types to extract
        fuzzy_note_type_list (list(str)): A list of substrings to search for in note types. Only one of
            noteType or fuzzyNoteType can be not None.
        out_fp (str): Path to write csv files to.
    Output:
        None: A csv file is written containing the headers fileName, and note_content.
    """
    all_avro_fns = glob.glob(os.path.join(avro_fp, '*.avro'))
    cols = ['note_id', 'mrn', 'time_str', 'date', 'title', 'filename']
    other_cols = ['setting', 'author', 'subject', 'service']
    N = len(all_avro_fns)
    seen_note_ids = set()
    data_df = []

    med_code_df = pd.read_csv(MED_CODE_FN)

    done = False
    recognized, unrecognized, total = 0, 0, 0
    unrecognized_titles = defaultdict(int)
    unrecognized_codes = defaultdict(int)

    for n in tqdm(range(N)):
        fn = all_avro_fns[n]
        with open(fn, 'rb') as fd:
            for record in reader(fd):
                date = datetime.strptime(record['TIME_STR_KEY'][:10], "%Y-%m-%d").date()
                title = record['TITLE']
                content = record['TEXT']
                mrn = record['MRN']
                time = record['TIME_STR_KEY']
                note_id = "_".join([mrn, time, title])
                code = record['EVENT_CODE']
                add_note = False
                if fuzzy_note_type_list is not None:
                    add_note = add_note or np.any([substr in title for substr in fuzzy_note_type_list])
                if note_type_list is not None:
                    add_note = add_note or title in note_type_list
                if note_id in seen_note_ids:
                    add_note = False
                if date.year < 2010:
                    add_note = False
                if add_note:
                    row = [
                        note_id,
                        mrn,
                        time,
                        date,
                        title,
                        fn
                    ]

                    med_code_info = get_med_code_info(med_code_df, code)
                    if len(med_code_info) == 0:
                        # print([code, title, fn])
                        unrecognized_codes[code] += 1
                        unrecognized_titles[title] += 1
                        unrecognized += 1
                        row += [None] * len(other_cols)
                    else:
                        recognized += 1
                        for k in other_cols:
                            row.append('|'.join(med_code_info[k.upper()]))
                    total += 1
                    data_df.append(row + [content])
                    seen_note_ids.add(note_id)
                    if total % 100 == 0:
                        print('Added {} notes'.format(total))
                    if max is not None and total >= max:
                        done = True
                if done:
                    break
        if done:
            break

    out_fn = os.path.join(out_fp, 'avro_notes.csv')
    df = pd.DataFrame(data_df, columns=cols + other_cols + ['content'])
    df.to_csv(out_fn, index=False)
    print('Note type counts\n{}'.format(df['title'].value_counts()))

    print('Recognized {} notes.  Failed to recognized {} notes.'.format(recognized, unrecognized))
    print(unrecognized_codes)
    print(unrecognized_titles)


if __name__ == '__main__':
    avro_fp = '/nlp/cdw/discovery_request_1342/notes_avro/all_docs_201406190000/'
    fuzzy_notes = ['Admission', 'Discharge', 'Progress']
    out_fp = './data/raw_notes'
    write_avro_to_csv(avro_fp, None, fuzzy_notes, out_fp)
